import groovy.transform.ToString
import org.oopscraft.fintics.indicator.*
import org.oopscraft.fintics.model.*

import java.math.RoundingMode
import java.time.LocalTime

/**
 * analysis
 */
@ToString(includeNames = true)
class Analysis {
    List<Macd> macds
    List<Rsi> rsis
    List<Dmi> dmis
    List<Obv> obvs
    List<Co> cos
}

/**
 * return analysis
 * @param ohlcvs
 * @return analysis
 */
def getAnalysis(Indicator indicator, Ohlcv.Type ohlcvType, int ohlcvPeriod) {
    def analysis = new Analysis()
    def ohlcvs = indicator.getOhlcvs(ohlcvType, ohlcvPeriod)
    analysis.macds = indicator.calculate(ohlcvs, MacdContext.DEFAULT)
    analysis.rsis = indicator.calculate(ohlcvs, RsiContext.DEFAULT)
    analysis.dmis = indicator.calculate(ohlcvs, DmiContext.DEFAULT)
    analysis.obvs = indicator.calculate(ohlcvs, ObvContext.DEFAULT)
    analysis.cos = tool.calculate(ohlcvs, CoContext.DEFAULT)
    return analysis
}

interface Score {}

/**
 * momentum score
 */
@ToString(includeNames = true)
class MomentumScore implements Score {
    def macdValue
    def macdSignal
    def macdValueOverSignal
    def macdOscillator
    def rsiValue
    def rsiSignal
    def rsiValueOverSignal
    def dmiPdiOverMdi
    def dmiAdx
    def obvValueOverSignal
    def coValue
    def coSignal
}

/**
 * return momentum score
 * @param analysis
 * @return momentum score
 */
def getMomentumScore(Analysis analysis) {
    def momentumScore = new MomentumScore()
    def period = 5
    // macd
    def macds = analysis.macds.take(period)
    def macd = macds.first()
    momentumScore.macdValue = tool.pctChange(macds.collect{it.value}) > 0 ? 100 : 0
    momentumScore.macdSignal = tool.pctChange(macds.collect{it.signal}) > 0 ? 100 : 0
    momentumScore.macdOscillator = tool.pctChange(macds.collect{it.oscillator}) > 0 ? 100 : 0
    momentumScore.macdValueOverSignal = macd.value > macd.oscillator ? 100 : 0
    // rsi
    def rsis = analysis.rsis.take(period)
    def rsi = rsis.first()
    momentumScore.rsiValue = tool.pctChange(rsis.collect{it.value}) > 50 ? 100 : 0
    momentumScore.rsiSignal = tool.pctChange(rsis.collect{it.signal}) > 50 ? 100 : 0
    momentumScore.rsiValueOverSignal = rsi.value > rsi.signal ? 100 : 0
    // dmi
    def dmi = analysis.dmis.first()
    momentumScore.dmiPdiOverMdi = dmi.pdi > dmi.mdi ? 100 : 0
    momentumScore.dmiAdx = dmi.adx > 20 && dmi.pdi > dmi.mdi ? 100 : 0
    // obv
    def obv = analysis.obvs.first()
    momentumScore.obvValueOverSignal = obv.value > obv.signal ? 100 : 0
    // co
    def co = analysis.cos.first()
    momentumScore.coValue = co.value > 0 ? 100 : 0
    momentumScore.coSignal = co.signal > 0 ? 100 : 0

    // return
    return momentumScore
}

/**
 * return score average
 * @param score
 * @return score average
 */
static def getScoreAverage(Score score) {
    def average = score.properties.values()
            .findAll{it instanceof Number}
            .average()
    return BigDecimal.valueOf(average)
            .setScale(2, RoundingMode.HALF_UP)
}

// defines
def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = "${assetIndicator.getAssetName()}(${assetId})"
List<Ohlcv> ohlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 1)
        .findAll{it.dateTime.toLocalDate().equals(dateTime.toLocalDate())}
def prices = ohlcvs.take(20).collect{it.closePrice}
def price = prices.first()
def priceSmas = tool.smas(prices)
def priceSma = priceSmas.first()
def priceSmaPctChange = tool.pctChange(priceSmas)
def priceZScores = tool.zScores(prices)
def priceZScore = priceZScores.first()
log.info("[{}] priceZScore: {}", assetName, priceZScores)

// analysis
def analysisOhlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 10)
def analysis = getAnalysis(analysisOhlcvs)
def momentumScore = getMomentumScore(analysis)
def momentumScoreAverage = getScoreAverage(momentumScore)

// trade
if (priceSmaPctChange > 0) {
    if (priceZScore < 0.0) {
        hold = 1
    }
    if (priceZScore > 2.0) {
        hold = 0
    }
}
if (priceSmaPctChange < 0) {
    if (priceZScore < -2.0) {
        hold = 1
    }
    if (priceZScore > 0.0) {
        hold = 0
    }
}

// default fallback
if (momentumScoreAverage < 50) {
    hold = 0
}

// return
return hold

