package org.oopscraft.fintics.trade

import groovy.transform.ToString
import org.oopscraft.fintics.indicator.*
import org.oopscraft.fintics.model.*

import java.math.RoundingMode
import java.time.LocalTime

@ToString(includeNames = true)
class Analysis {
    def emaValueShortOverLong
    def macdValue
    def macdValuePctChange
    def macdValueOverSignal
    def macdOscillator
    def rsiValue
    def rsiValuePctChange
    def rsiValueOverSignal
    def dmiPdiOverMdi
    def dmiAdx
    def obvValueOverSignal
    def obvValuePctChange
    def coValue
    def coValueOverSignal
    def coValuePctChange

    def getScore() {
        def average = this.properties.values()
                .findAll{it instanceof Number}
                .average()
        return BigDecimal.valueOf(average)
                .setScale(2, RoundingMode.HALF_UP)
    }
}


def getAnalysis(List<Ohlcv> ohlcvs) {
    def analysis = new Analysis()
    def pctChangePeriod = 10

    // ema
    def shortEmas = tool.calculate(ohlcvs, EmaContext.of(10))
    def longEmas = tool.calculate(ohlcvs, EmaContext.of(20))
    def shortEma = shortEmas.first()
    def longEma = longEmas.first()
    analysis.emaValueShortOverLong = (shortEma.value > longEma.value ? 100 : 0)

    // macd
    def macds = tool.calculate(ohlcvs, MacdContext.DEFAULT)
    def macd = macds.first()
    def macdValues = macds.collect{it.value}
    def macdValuePctChange = tool.pctChange(macdValues.take(pctChangePeriod))
    analysis.macdValue = (macd.value > 0 ? 100 : 0)
    analysis.macdValueOverSignal = (macd.value > macd.signal ? 100 : 0)
    analysis.macdOscillator = (macd.oscillator > 0 ? 100 : 0)
    analysis.macdValuePctChange = (macdValuePctChange > 0 ? 100 : 0)

    // rsi
    def rsis = tool.calculate(ohlcvs, RsiContext.DEFAULT)
    def rsi = rsis.first()
    def rsiValues = rsis.collect{it.value}
    def rsiValuePctChange = tool.pctChange(rsiValues.take(pctChangePeriod))
    analysis.rsiValue = (rsi.value > 0 ? 100 : 0)
    analysis.rsiValueOverSignal = (rsi.value > rsi.signal ? 100 : 0)
    analysis.rsiValuePctChange = (rsiValuePctChange > 0 ? 100 : 0)

    // dmi
    def dmis = tool.calculate(ohlcvs, DmiContext.DEFAULT)
    def dmi = dmis.first()
    analysis.dmiPdiOverMdi = (dmi.pdi > dmi.mdi ? 100 : 0)
    analysis.dmiAdx = (dmi.adx > 20 && dmi.pdi > dmi.mdi ? 100 : 0)

    // obv
    def obvs = tool.calculate(ohlcvs, ObvContext.DEFAULT)
    def obv = obvs.first()
    def obvValues = obvs.collect{it.value}
    def obvValuePctChange = tool.pctChange(obvValues.take(pctChangePeriod))
    analysis.obvValueOverSignal = (obv.value > obv.signal ? 100 : 0)
    analysis.obvValuePctChange = (obvValuePctChange > 0 ? 100 : 0)

    // co
    def cos = tool.calculate(ohlcvs, CoContext.DEFAULT)
    def co = cos.first()
    def coValues = cos.collect{it.value}
    def coValuePctChange = tool.pctChange(coValues.take(pctChangePeriod))
    analysis.coValue = (co.value > 0 ? 100 : 0)
    analysis.coValueOverSignal = (co.value > co.signal ? 100 : 0)
    analysis.coValuePctChange = (coValuePctChange > 0 ? 100 : 0)

    // return
    return analysis
}

def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = "${assetIndicator.getAssetName()}(${assetId})"

// for test
if (dateTime.toLocalTime().isAfter(LocalTime.of(11,0))) {
    BalanceAsset balanceAsset = balance.getBalanceAsset(assetId).orElse(null)
    if(balanceAsset == null) {
        return null
    }
}

def ohlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 1).findAll{it.dateTime.toLocalDate().equals(dateTime.toLocalDate())}
def prices = ohlcvs.collect{it.closePrice}
def priceZScore = tool.zScore(prices.take(20))
log.info("priceZScore: {}", priceZScore)

def analysisPeriod = dateTime.getHour() - 8
analysisPeriod = 1
def analysisOhlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, analysisPeriod)
        .findAll{it.dateTime.toLocalDate().equals(dateTime.toLocalDate())}
def analysis = getAnalysis(analysisOhlcvs)
def analysisScore = analysis.getScore()

// buy
if (priceZScore > 2.0 && analysisScore > 70) {
    hold = 1
}

// check
if (priceZScore < 0.0 && analysisScore < 60) {
    BalanceAsset balanceAsset = balance.getBalanceAsset(assetId).orElse(null)
    log.info("######## balanceAsset: {}", balanceAsset)
    if(balanceAsset != null) {
        def profitPercentage = balanceAsset.getProfitPercentage();
        log.info("########## profitPercentage: {}", profitPercentage)
        if(profitPercentage > 0.5) {
            hold = 0
        }
    }
}

// sell
if (priceZScore < -2.0 && analysisScore < 50) {
    hold = 0
}

//if (dateTime.toLocalTime().isBefore(LocalTime.of(9,20))) {
//    hold = null
//}

if (dateTime.toLocalTime().isAfter(LocalTime.of(11,0))) {
    if (hold == 1) {
        hold = null
    }
}

if (dateTime.toLocalTime().isAfter(LocalTime.of(15,10))) {
    hold = 0
}

return hold

