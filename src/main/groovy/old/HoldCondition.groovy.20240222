package org.oopscraft.fintics.trade

import org.oopscraft.fintics.indicator.*
import org.oopscraft.fintics.model.*

import java.time.LocalTime

/**
 * analyze indicator
 * @param indicator indicator
 * @param ohlcvType ohlcvType
 * @param ohlcvPeriod period
 * @return result map
 */
def analyzeIndicator(Indicator indicator, Ohlcv.Type ohlcvType, int ohlcvPeriod) {
    // info
    def name = indicator.getIndicatorName() + ':' + ohlcvType + ':' + ohlcvPeriod

    // ohlcv
    def ohlcvs = indicator.getOhlcvs(ohlcvType, ohlcvPeriod);
    def prices = ohlcvs.collect{it.closePrice}
    def price = prices.first()
    def pricePctChange = tool.pctChange(prices.take(5))
    log.debug("[{}] price: {}", name, price)
    log.debug("[{}] pricePctChange: {}", name, pricePctChange)

    // shortMa
    def shortMas = indicator.calculate(EmaContext.of(10), ohlcvType, ohlcvPeriod)
    def shortMa = shortMas.first()
    def shortMaValues = shortMas.collect{it.value}
    def shortMaValue = shortMaValues.first()
    log.debug("[{}] shortMa: {}", name, shortMa)

    // longMa
    def longMas = indicator.calculate(EmaContext.of(30), ohlcvType, ohlcvPeriod)
    def longMa = longMas.first()
    def longMaValues = longMas.collect{it.value}
    def longMaValue = longMaValues.first()
    log.debug("[{}] longMa: {}", name, longMa)

    // macd
    def macds = indicator.calculate(MacdContext.DEFAULT, ohlcvType, ohlcvPeriod)
    def macd = macds.first()
    def macdValues = macds.collect{it.value}
    def macdValue = macdValues.first()
    def macdSignals = macds.collect{it.signal}
    def macdSignal = macdSignals.first()
    def macdOscillators = macds.collect{it.oscillator}
    def macdOscillator = macdOscillators.first()
    log.debug("[{}] macd: {}", name, macd)

    // rsi
    def rsis = indicator.calculate(RsiContext.DEFAULT, ohlcvType, ohlcvPeriod)
    def rsi = rsis.first()
    def rsiValues = rsis.collect{it.value}
    def rsiValue = rsiValues.first()
    def rsiSignals = rsis.collect{it.signal}
    def rsiSignal = rsiSignals.first()
    log.debug("[{}] rsi: {}", name, rsi)

    // dmi
    def dmis = indicator.calculate(DmiContext.DEFAULT, ohlcvType, ohlcvPeriod)
    def dmi = dmis.first()
    def dmiPdis = dmis.collect{it.pdi}
    def dmiPdi = dmiPdis.first()
    def dmiMdis = dmis.collect{it.mdi}
    def dmiMdi = dmiMdis.first()
    def dmiAdxs = dmis.collect{it.adx}
    def dmiAdx = dmiAdxs.first()
    log.debug("[{}] dmi: {}", name, dmi)

    // obv
    def obvs = indicator.calculate(ObvContext.DEFAULT, ohlcvType, ohlcvPeriod)
    def obv = obvs.first()
    def obvValues = obvs.collect{it.value}
    def obvValue = obvValues.first()
    def obvSignals = obv.collect{it.signal}
    def obvSignal = obvSignals.first()
    log.debug("[{}] obv:{}", name, obv)

    // co
    def cos = indicator.calculate(CoContext.DEFAULT, ohlcvType, ohlcvPeriod)
    def co = cos.first()
    def coValues = cos.collect{it.value}
    def coValue = coValues.first()
    def coSignals = cos.collect{it.signal}
    def coSignal = coSignals.first()
    log.debug("[{}] co: {}", name, co)

    // result
    def result = [:]
    result.pricePctChange = (pricePctChange > 0 ? 100 : 0)
    result.priceOverShortMa = (price > shortMaValue ? 100 : 0)
    result.priceOverLongMaValue = (price > longMaValue ? 100 : 0)
    result.shortMaValueOverLongMaValue = (shortMaValue > longMaValue ? 100 : 0)
    result.macdValue = (macdValue > 0 ? 100 : 0)
    result.macdValueOverSignal = (macdValue > macdSignal ? 100 : 0)
    result.macdOscillator = (macdOscillator > 0 ? 100 : 0)
    result.rsiValueOverSignal = (rsiValue > rsiSignal ? 100 : 0)
    result.rsiValue = (rsiValue > 50 ? 100 : 0)
    result.rsiValueOverBought = (rsiValue > 30 && rsiValue < rsiSignal ? 0 : 50)
    result.rsiValueOverSell = (rsiValue < 30 && rsiValue > rsiSignal ? 100 : 50)
    result.dmiPdiOverMdi = (dmiPdi > dmiMdi ? 100 : 0)
    result.dmiAdx = (dmiAdx > 25 && dmiPdi > dmiMdi ? 100 : 0)
    result.obvValueOverSignal = (obvValue > obvSignal ? 100 : 0)
    result.coValueOverSignal = (coValue > coSignal ? 100 : 0)
    result.coValue = (coValue > 0 ? 100 : 0)

    // return
    return result
}

//=============================
// defines
//=============================
def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = assetIndicator.getAssetName()
def assetAlias = "${assetName}(${assetId})"

//=============================
// analyze asset
//=============================
def assetAnalysis = [:]
def assetAnalysisScores = []
//assetAnalysis.minute = analyzeIndicator(assetIndicator, Ohlcv.Type.MINUTE, 1)
//assetAnalysis.minute5 = analyzeIndicator(assetIndicator, Ohlcv.Type.MINUTE, 5)
assetAnalysis.minute10 = analyzeIndicator(assetIndicator, Ohlcv.Type.MINUTE, 10)
//assetAnalysis.minute30 = analyzeIndicator(assetIndicator, Ohlcv.Type.MINUTE, 30)
assetAnalysis.minute60 = analyzeIndicator(assetIndicator, Ohlcv.Type.MINUTE, 60)
assetAnalysis.daily = analyzeIndicator(assetIndicator, Ohlcv.Type.DAILY, 1)
assetAnalysis.each { key, value ->
    def average = value.values().average()
    log.info("[{}] assetAnalysis.{}: {}", assetAlias, key, average)
    assetAnalysisScores.add(average)
}

//=============================
// analyze indice
//=============================
def indiceAnalysis = [:]
def indiceAnalysisScores = []

// USD/KRW (inverse)
//indiceAnalysis.usdKrw = analyzeIndicator(indiceIndicators['USD_KRW'], Ohlcv.Type.MINUTE, 60)
//indiceAnalysisScores.add(100 - (indiceAnalysis.usdKrw.values().average() as Number))

// KOSPI
//indiceAnalysis.kospi = analyzeIndicator(indiceIndicators['KOSPI'], Ohlcv.Type.MINUTE, 60)
//indiceAnalysisScores.add(indiceAnalysis.kospi.values().average())

// Nasdaq Future
//indiceAnalysis.ndxFuture = analyzeIndicator(indiceIndicators['NDX_FUTURE'], Ohlcv.Type.MINUTE, 60)
//indiceAnalysisScores.add(indiceAnalysis.ndxFuture.values().average())

// logging
indiceAnalysis.each { key, value ->
    def average = value.values().average()
    log.info("[{}] indiceAnalysis.{}: {}", assetAlias, key, average)
}

//=============================
// decide hold
//=============================
def totalScores = []
totalScores.addAll(assetAnalysisScores)
totalScores.addAll(indiceAnalysisScores)

// buy
if(totalScores.average() > 70 && assetAnalysisScores.every{it > 50}) {
    log.info("[{}] TotalScore over 70", assetAlias)
    hold = 1
}

// sell
if(totalScores.average() < 50) {
    log.info("[{}] TotalScore is under 50", assetAlias)
    hold = 0
}

//=============================
// post processor
//=============================
// 1. early trading session, detect price dislocation(over-estimated gap-up/gap-down)
//if(dateTime.toLocalTime().isBefore(LocalTime.of(9,30))) {
//    log.info("[{}] filter price pctChange before 9:30", assetAlias)
//    def yesterdayClosePrice = assetIndicator.getOhlcvs(Ohlcv.Type.DAILY,1)[1].closePrice
//    def currentClosePrice = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE,1).first().closePrice
//    def initialPricePctChange = tool.pctChange([currentClosePrice, yesterdayClosePrice])
//    log.info("[{}] closePricePctChange: {} -> {} ({}%)", assetAlias, yesterdayClosePrice, currentClosePrice, initialPricePctChange)
//    if(initialPricePctChange.abs() > 2.0) {
//        log.warn("[{}] initialPricePctChange is over 1.0%, skip process", assetAlias)
//        hold = null
//    }
//}

//==============================
// return
//==============================
return hold
