package org.oopscraft.fintics.trade

import org.oopscraft.fintics.calculator.*
import org.oopscraft.fintics.model.*

import java.time.LocalTime

class Analysis {
    List<Ohlcv> ohlcvs
    Ohlcv ohlcv
    List<Ema> shortEmas
    Ema shortEma
    List<Ema> longEmas
    Ema longEma
    List<Macd> macds
    Macd macd
    List<Rsi> rsis
    Rsi rsi
    List<Dmi> dmis
    Dmi dmi
    List<Obv> obvs
    Obv obv
    List<Co> cos
    Co co
}

static def getAnalysis(Indicator indicator, Ohlcv.Type ohlcvType, int ohlcvPeriod) {
    def analysis = new Analysis()
    // ohlcv
    analysis.ohlcvs = indicator.getOhlcvs(ohlcvType, ohlcvPeriod)
    analysis.ohlcv = analysis.ohlcvs.first()
    // shorEma
    analysis.shortEmas = indicator.calculate(EmaContext.of(10), ohlcvType, ohlcvPeriod)
    analysis.shortEma = analysis.shortEmas.first()
    // longEma
    analysis.longEmas = indicator.calculate(EmaContext.of(30), ohlcvType, ohlcvPeriod)
    analysis.longEma = analysis.longEmas.first()
    // macd
    analysis.macds = indicator.calculate(MacdContext.DEFAULT, ohlcvType, ohlcvPeriod)
    analysis.macd = analysis.macds.first()
    // rsi
    analysis.rsis = indicator.calculate(RsiContext.DEFAULT, ohlcvType, ohlcvPeriod)
    analysis.rsi = analysis.rsis.first()
    // dmi
    analysis.dmis = indicator.calculate(DmiContext.DEFAULT, ohlcvType, ohlcvPeriod)
    analysis.dmi = analysis.dmis.first()
    // obv
    analysis.obvs = indicator.calculate(ObvContext.DEFAULT, ohlcvType, ohlcvPeriod)
    analysis.obv = analysis.obvs.first()
    // co
    analysis.cos = indicator.calculate(CoContext.DEFAULT, ohlcvType, ohlcvPeriod)
    analysis.co = analysis.cos.first()
    // return
    return analysis
}

static def getMomentumScores(Analysis analysis) {
    def scores = [:]
    // ema
    scores.emaShortOverLong = analysis.shortEma.value > analysis.longEma.value ? 100 : 0
    // macd
    scores.maceValue = analysis.macd.value > 0 ? 100 : 0
    scores.macdValueOverSignal = analysis.macd.value > analysis.macd.signal ? 100 : 0
    scores.macdOscillator = analysis.macd.oscillator > 0 ? 100 : 0
    // rsi
    scores.rsiValue = analysis.rsi.value > 50 ? 100 : 0
    scores.rsiValueOverSignal = analysis.rsi.value > analysis.rsi.signal ? 100 : 0
    // dmi
    scores.dmiPdiOverMdi = analysis.dmi.pdi > analysis.dmi.mdi ? 100 : 0
    scores.dmiAdx = analysis.dmi.adx > 25 && analysis.dmi.pdi > analysis.dmi.mdi ? 100 : 0
    // obv
    scores.obvValueOverSignal = analysis.obv.value > analysis.obv.signal ? 100 : 0
    // co
    scores.coValue = analysis.co.value > 0 ? 100 : 0
    scores.coValueOverSignal = analysis.co.value > analysis.co.signal ? 100 : 0
    // return
    return scores
}

def getDirectionScores(Analysis analysis) {
    def scores = getMomentumScores(analysis)
    def prices = analysis.ohlcvs.collect{it.closePrice}
    def price = prices.first()
    scores.pricePctChange = tool.pctChange(prices.take(5)) > 0.1 ? 100 : 0
    scores.priceOverShortEma = price > analysis.shortEma.value ? 100 : 0
    // return
    return scores
}

//static def getOverSellScores(Analysis analysis) {
//    def scores = [:]
//    // rsi
//    scores.rsiValue = analysis.rsi.value < 30 ? 100 : 0
//    //scores.rsiValue = analysis.rsi.value < 30 && analysis.rsi.value > analysis.rsi.signal ? 100 : 0
//    // return
//    return scores
//}
//
//static def getOverBuyScores(Analysis analysis) {
//    def scores = [:]
//    // rsi
//    scores.rsiValue = analysis.rsi.value > 70 ? 100 : 0
//    //scores.rsi = analysis.rsi.value > 70 && analysis.rsi.value < analysis.rsi.signal ? 100 : 0
//    // return
//    return scores
//}

// define
def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = assetIndicator.getAssetName()
def assetAlias = "${assetName}(${assetId})"

// analysis
//def analysisMinute = getAnalysis(assetIndicator, Ohlcv.Type.MINUTE, 1)
def analysisMinute5 = getAnalysis(assetIndicator, Ohlcv.Type.MINUTE, 5)
def analysisMinute60 = getAnalysis(assetIndicator, Ohlcv.Type.MINUTE, 60)
def analysisDaily = getAnalysis(assetIndicator, Ohlcv.Type.DAILY, 1)

// momentum score
def momentumScoresMinute60 = getMomentumScores(analysisMinute60)
def momentumScoresDaily = getMomentumScores(analysisDaily)
def momentumScores = []
momentumScores.addAll(momentumScoresMinute60.values())
momentumScores.addAll(momentumScoresDaily.values())
def momentumScore = momentumScores.average()
log.info("[{}] momentumScoresMinute60: {}", assetAlias, momentumScoresMinute60)
log.info("[{}] momentumScoresDaily: {}", assetAlias, momentumScoresDaily)
log.info("[{}] momentumScore: {}", assetAlias, momentumScore)

// direction score
def directionScoresMinute5 = getDirectionScores(analysisMinute5)
def directionScores = []
directionScores.addAll(directionScoresMinute5.values())
def directionScore = directionScores.average()
log.info("[{}] directionScoresMinute5: {}", assetAlias, directionScoresMinute5)
log.info("[{}] directionScore: {}", assetAlias, directionScore)

// positive momentum
if (momentumScore > 75) {
    log.info("[{}] momentumScore over 75", assetAlias)

    // buy
    if(directionScore > 75) {
        hold = 1
    }

    // sell
    if(directionScore < 50) {
        hold = 0
    }
}

// negative momentum (fallback)
if (momentumScore < 50) {
    log.info("[{}] momentumScore under 50", assetAlias)
    hold = 0
}

// post process
if (dateTime.toLocalTime().isAfter(LocalTime.of(15,10))) {
    def dailyOhlcv = assetIndicator.getOhlcvs(Ohlcv.Type.DAILY, 1).first()
    if(dailyOhlcv.closePrice < dailyOhlcv.openPrice) {
        hold = 0
    }
}

// return
return hold

