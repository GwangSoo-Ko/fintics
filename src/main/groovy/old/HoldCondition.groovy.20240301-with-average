import groovy.transform.ToString
import org.oopscraft.fintics.indicator.*
import org.oopscraft.fintics.model.*

import java.math.RoundingMode

@ToString(includeNames = true)
class Analysis {
    List<Ohlcv> ohlcvs
    List<Ema> emas
    List<Bb> bbs
    List<Macd> macds
    List<Rsi> rsis
    List<Dmi> dmis
    List<Obv> obvs
    List<Co> cos
}

def getAnalysis(Indicator indicator, Ohlcv.Type ohlcvType, int ohlcvPeriod) {
    def analysis = new Analysis()
    def ohlcvs = indicator.getOhlcvs(ohlcvType, ohlcvPeriod)
    analysis.ohlcvs = ohlcvs
    analysis.emas = tool.calculate(ohlcvs, EmaContext.DEFAULT)
    analysis.bbs = tool.calculate(ohlcvs, BbContext.DEFAULT)
    analysis.macds = tool.calculate(ohlcvs, MacdContext.DEFAULT)
    analysis.rsis = tool.calculate(ohlcvs, RsiContext.DEFAULT)
    analysis.dmis = tool.calculate(ohlcvs, DmiContext.DEFAULT)
    analysis.obvs = tool.calculate(ohlcvs, ObvContext.DEFAULT)
    analysis.cos = tool.calculate(ohlcvs, CoContext.DEFAULT)
    return analysis
}

@ToString(includeNames = true)
class HoldScore {
    def emaValuePctChange
    def emaPriceOverValue
    def bbMbbPctChange
    def bbPriceOverMbb
    def macdValue
    def macdValuePctChange
    def macdValueOverSignal
    def macdOscillator
    def macdOscillatorPctChange
    def rsiValue
    def rsiValuePctChange
    def rsiValueOverSignal
    def dmiPdiPctChange
    def dmiMdiPctChange
    def dmiPdiOverMdi
    def dmiAdxPctChange
    def obvValuePctChange
    def obvValueOverSignal
    def coValue
    def coValuePctChange
    def coValueOverSignal
}

def getHoldScore(Analysis analysis) {
    def holdScore = new HoldScore()
    def period = 10
    // ohlcv
    def ohlcvs = analysis.ohlcvs.take(period)
    def ohlcv = ohlcvs.first()
    def closePrice = ohlcv.closePrice
    // ema
    def emas = analysis.emas.take(period)
    def emaValues = emas.collect{it.value}
    def emaValue = emaValues.first()
    def emaValuePctChange = tool.pctChange(emaValues)
    holdScore.emaValuePctChange = emaValuePctChange > 0 ? 100 : 0
    holdScore.emaPriceOverValue = closePrice > emaValue ? 100 : 0
    // bb
    def bbs = analysis.bbs.take(period)
    def bbMbbs = bbs.collect{it.mbb}
    def bbMbb = bbMbbs.first()
    def bbMbbPctChange = tool.pctChange(bbMbbs)
    holdScore.bbMbbPctChange = bbMbbPctChange > 0 ? 100 : 0
    holdScore.bbPriceOverMbb = closePrice > bbMbb ? 100 : 0
    // macd
    def macds = analysis.macds.take(period)
    def macdValues = macds.collect{it.value}
    def macdValue = macdValues.first()
    def macdSignals = macds.collect{it.signal}
    def macdSignal = macdSignals.first()
    def macdOscillators = macds.collect{it.oscillator}
    def macdOscillator = macdOscillators.first()
    def macdValuePctChange = tool.pctChange(macdValues)
    def macdOscillatorPctChange = tool.pctChange(macdOscillators)
    holdScore.macdValue = macdValue > 0 ? 100 : 0
//    holdScore.macdValuePctChange = macdValuePctChange > 0 ? 100 : 0
    holdScore.macdValueOverSignal = macdValue > macdSignal ? 100 : 0
    holdScore.macdOscillator = macdOscillator > 0 ? 100 : 0
//    holdScore.macdOscillatorPctChange = macdOscillatorPctChange > 0 ? 100 : 0
    // rsi
    def rsis = analysis.rsis.take(period)
    def rsiValues = rsis.collect{it.value}
    def rsiValue = rsiValues.first()
    def rsiSignals = rsis.collect{it.signal}
    def rsiSignal = rsiSignals.first()
    holdScore.rsiValue = rsiValue > 50 ? 100 : 0
//    holdScore.rsiValuePctChange = tool.pctChange(rsiValues)
    holdScore.rsiValueOverSignal = rsiValue > rsiSignal ? 100 : 0
    // dmi
    def dmis = analysis.dmis.take(period)
    def dmiPdis = dmis.collect{it.pdi}
    def dmiPdi = dmiPdis.first()
    def dmiPdiPctChange = tool.pctChange(dmiPdis)
    def dmiMdis = dmis.collect{it.mdi}
    def dmiMdi = dmiMdis.first()
    def dmiMdiPctChange = tool.pctChange(dmiMdis)
    def dmiAdxs = dmis.collect{it.adx}
    def dmiAdxPctChange = tool.pctChange(dmiAdxs)
//    holdScore.dmiPdiPctChange = dmiPdiPctChange > 0 ? 100 : 0
//    holdScore.dmiMdiPctChange = dmiMdiPctChange < 0 ? 100 : 0
    holdScore.dmiPdiOverMdi = dmiPdi > dmiMdi ? 100 : 0
    holdScore.dmiAdxPctChange = dmiPdiPctChange > 0 && dmiAdxPctChange > 0 ? 100 : 0
    // co
    def obvs = analysis.obvs.take(period)
    def obvValues = obvs.collect{it.value}
    def obvValue = obvValues.first()
    def obvSignals = obvs.collect{it.signal}
    def obvSignal = obvSignals.first()
    def obvValuePctChange = tool.pctChange(obvValues)
//    holdScore.obvValuePctChange = obvValuePctChange > 0 ? 100 : 0
    holdScore.obvValueOverSignal = obvValue > obvSignal ? 100 : 0
    // co
    def cos = analysis.cos.take(period)
    def coValues = cos.collect{it.value}
    def coValue = coValues.first()
    def coValuePctChange = tool.pctChange(coValues)
    def coSignals = cos.collect{it.signal}
    def coSignal = coSignals.first()
    holdScore.coValue = coValue > 0 ? 100 : 0
//    holdScore.coValuePctChange = coValuePctChange > 0 ? 100 : 0
    holdScore.coValueOverSignal = coValue > coSignal ? 100 : 0
    // return
    return holdScore
}

static def getScoreAverage(score) {
    return score.properties.values()
            .findAll{it instanceof Number}
            .average()
}

//===============================
// defines
//===============================
def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = "${assetIndicator.getAssetName()}(${assetId})"

////===============================
//// skip (for performance)
////===============================
//if (priceZScore.abs() < 1.5) {
//    log.info("[{}] skip under price z-score[{}]", assetName, priceZScore)
//    return null
//}

//===============================
// asset hold score
//===============================
def assetAnalysises = [
        minute: getAnalysis(assetIndicator, Ohlcv.Type.MINUTE, 3),
        hourly: getAnalysis(assetIndicator, Ohlcv.Type.MINUTE, 60),
        daily: getAnalysis(assetIndicator, Ohlcv.Type.DAILY, 1)
]
def assetHoldScores = [
        minute: getHoldScore(assetAnalysises.minute),
        hourly: getHoldScore(assetAnalysises.hourly),
        daily: getHoldScore(assetAnalysises.daily)
]
assetHoldScores.each{key, value ->
    log.info("[{}] assetHoldScore.{}: {}", assetName, key, value)
}
def assetHoldScoreAverage = assetHoldScores
        .collect{getScoreAverage(it.value)}
        .average()
log.info("[{}] assetHoldScoreAverage: {}", assetName, assetHoldScoreAverage)

//================================
// indice asset score
//================================
//def indiceAnalysises = [
//        kospi: getAnalysis(indiceIndicators['KOSPI'], Ohlcv.Type.DAILY, 1)
//]
//def indiceHoldScores = [
//        kospi: getHoldScore(indiceAnalysises.kospi)
//]
//def indiceHoldScoreAverage = indiceHoldScores
//        .collect{getScoreAverage(it.value)}
//        .average()

//================================
// total score
//================================
def holdScoreAverage = [
        assetHoldScoreAverage,
//        indiceHoldScoreAverage
].average()
log.info("[{}] holdScoreAverage: {}", assetName, holdScoreAverage)


def ohlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 1)
//def fastMas = tool.calculate(ohlcvs, SmaContext.of(20))
//def fastMaValue = fastMas.first().value
//def slowMas = tool.calculate(ohlcvs, SmaContext.of(60))
//def slowMaValue = slowMas.first().value
//def rsis = tool.calculate(ohlcvs, RsiContext.DEFAULT)
//def rsi = rsis.first()
//def rsiValue = rsi.value
//def rsiSignal = rsi.signal


//================================
// decide hold
//================================
// buy
if (getScoreAverage(assetHoldScores.daily) > 50) {
    def avg = tool.mean([getScoreAverage(assetHoldScores.minute), getScoreAverage(assetHoldScores.hourly)])
    if (avg > 60) {
//        if (tool.isDescending([getScoreAverage(assetHoldScores.minute), getScoreAverage(assetHoldScores.hourly)])) {
            hold = 1
//        }
    }
    if (avg < 40) {
//        if (tool.isDescending([getScoreAverage(assetHoldScores.minute), getScoreAverage(assetHoldScores.hourly)])) {
            hold = 0
//        }
    }
}

// sell
if (getScoreAverage(assetHoldScores.daily) < 50) {
    hold = 0
}

//================================
// return
//================================
return hold

