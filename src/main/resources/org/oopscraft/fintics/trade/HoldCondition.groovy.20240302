import groovy.transform.ToString
import org.oopscraft.fintics.calculator.*
import org.oopscraft.fintics.model.BalanceAsset
import org.oopscraft.fintics.model.Ohlcv

import java.time.LocalTime

@ToString(includeNames = true)
class Analysis {
    List<Ohlcv> ohlcvs
    List<Ema> emas
    List<Bb> bbs
    List<Macd> macds
    List<Rsi> rsis
    List<Dmi> dmis
    List<Obv> obvs
    List<Co> cos
}

def getAnalysis(List<Ohlcv> ohlcvs) {
    def analysis = new Analysis()
    analysis.ohlcvs = ohlcvs
    analysis.emas = tool.calculate(ohlcvs, EmaContext.DEFAULT)
    analysis.bbs = tool.calculate(ohlcvs, BbContext.DEFAULT)
    analysis.macds = tool.calculate(ohlcvs, MacdContext.DEFAULT)
    analysis.rsis = tool.calculate(ohlcvs, RsiContext.DEFAULT)
    analysis.dmis = tool.calculate(ohlcvs, DmiContext.DEFAULT)
    analysis.obvs = tool.calculate(ohlcvs, ObvContext.DEFAULT)
    analysis.cos = tool.calculate(ohlcvs, CoContext.DEFAULT)
    return analysis
}

@ToString(includeNames = true)
class Score {
    def pricePctChange
    def emaValuePctChange
    def emaPriceOverValue
    def bbMbbPctChange
    def bbPriceOverMbb
    def macdValue
    def macdValuePctChange
    def macdValueOverSignal
    def macdOscillator
    def macdOscillatorPctChange
    def rsiValue
    def rsiValuePctChange
    def rsiValueOverSignal
    def dmiPdiPctChange
    def dmiMdiPctChange
    def dmiPdiOverMdi
    def dmiAdxPctChange
    def obvValuePctChange
    def obvValueOverSignal
    def coValue
    def coValuePctChange
    def coValueOverSignal

    def getAverage() {
        return this.properties.values()
                .findAll{it instanceof Number}
                .average()
    }
}

def getScore(Analysis analysis) {
    def score = new Score()
    def period = 10

    // ohlcv
    def ohlcvs = analysis.ohlcvs.take(period)
    def ohlcv = ohlcvs.first()
    def prices = ohlcvs.collect{it.closePrice}
    def pricePctChange =  tool.pctChange(prices)
    score.pricePctChange = pricePctChange > 0 ? 100 : 0

    // ema
    def emas = analysis.emas.take(period)
    def ema = emas.first()
    def emaValues = emas.collect{it.value}
    def emaValuePctChange = tool.pctChange(emaValues)
    score.emaPriceOverValue = ohlcv.closePrice > ema.value ? 100 : 0
    score.emaValuePctChange = emaValuePctChange > 0 ? 100 : 0

    // bb
    def bbs = analysis.bbs.take(period)
    def bb = bbs.first()
    def bbMbbs = bbs.collect{it.mbb}
    def bbMbbPctChange = tool.pctChange(bbMbbs)
    score.bbMbbPctChange = bbMbbPctChange > 0 ? 100 : 0
    score.bbPriceOverMbb = ohlcv.closePrice > bb.mbb ? 100 : 0

    // macd
    def macds = analysis.macds.take(period)
    def macdValues = macds.collect{it.value}
    def macdValue = macdValues.first()
    def macdSignals = macds.collect{it.signal}
    def macdSignal = macdSignals.first()
    def macdOscillators = macds.collect{it.oscillator}
    def macdOscillator = macdOscillators.first()
    def macdValuePctChange = tool.pctChange(macdValues)
    def macdOscillatorPctChange = tool.pctChange(macdOscillators)
    score.macdValue = macdValue > 0 ? 100 : 0
    score.macdValuePctChange = macdValuePctChange > 0 ? 100 : 0
    score.macdValueOverSignal = macdValue > macdSignal ? 100 : 0
    score.macdOscillator = macdOscillator > 0 ? 100 : 0
    score.macdOscillatorPctChange = macdOscillatorPctChange > 0 ? 100 : 0

    // rsi
    def rsis = analysis.rsis.take(period)
    def rsiValues = rsis.collect{it.value}
    def rsiValue = rsiValues.first()
    def rsiSignals = rsis.collect{it.signal}
    def rsiSignal = rsiSignals.first()
    score.rsiValue = rsiValue > 50 ? 100 : 0
    score.rsiValuePctChange = tool.pctChange(rsiValues)
    score.rsiValueOverSignal = rsiValue > rsiSignal ? 100 : 0

    // dmi
    def dmis = analysis.dmis.take(period)
    def dmiPdis = dmis.collect{it.pdi}
    def dmiPdi = dmiPdis.first()
    def dmiPdiPctChange = tool.pctChange(dmiPdis)
    def dmiMdis = dmis.collect{it.mdi}
    def dmiMdi = dmiMdis.first()
    def dmiMdiPctChange = tool.pctChange(dmiMdis)
    def dmiAdxs = dmis.collect{it.adx}
    def dmiAdxPctChange = tool.pctChange(dmiAdxs)
    score.dmiPdiPctChange = dmiPdiPctChange > 0 ? 100 : 0
    score.dmiMdiPctChange = dmiMdiPctChange < 0 ? 100 : 0
    score.dmiPdiOverMdi = dmiPdi > dmiMdi ? 100 : 0
    score.dmiAdxPctChange = dmiPdiPctChange > 0 && dmiAdxPctChange > 0 ? 100 : 0

    // co
    def obvs = analysis.obvs.take(period)
    def obvValues = obvs.collect{it.value}
    def obvValue = obvValues.first()
    def obvSignals = obvs.collect{it.signal}
    def obvSignal = obvSignals.first()
    def obvValuePctChange = tool.pctChange(obvValues)
    score.obvValuePctChange = obvValuePctChange > 0 ? 100 : 0
    score.obvValueOverSignal = obvValue > obvSignal ? 100 : 0

    // co
    def cos = analysis.cos.take(period)
    def coValues = cos.collect{it.value}
    def coValue = coValues.first()
    def coValuePctChange = tool.pctChange(coValues)
    def coSignals = cos.collect{it.signal}
    def coSignal = coSignals.first()
    score.coValue = coValue > 0 ? 100 : 0
    score.coValuePctChange = coValuePctChange > 0 ? 100 : 0
    score.coValueOverSignal = coValue > coSignal ? 100 : 0

    // return
    return score
}


//================================
// defines
//================================
def hold = null
def assetId = assetIndicator.getAssetId()
def assetName = "${assetIndicator.getAssetName()}(${assetId})"

// ohlcv
List<Ohlcv> ohlcvs = assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 3)
//        .findAll{it.dateTime.toLocalDate().equals(dateTime.toLocalDate())}
def prices = ohlcvs.collect{it.closePrice}.take(20)
def price = prices.first()
//def zScores = tool.zScores(prices)
//def zScore = zScores.first()
//log.info("====== zScore: {}", zScore)

// fast ma
List<Sma> fastMas = tool.calculate(ohlcvs, SmaContext.of(20)).take(20)
def fastMaValues = fastMas.collect{it.value}
def fastMaValue = fastMaValues.first()
def fastMaValuePctChange = tool.pctChange(fastMaValues.take(20))

// slow ma
List<Sma> slowMas = tool.calculate(ohlcvs, SmaContext.of(60)).take(60)
def slowMaValues = slowMas.collect{it.value}
def slowMaValue = slowMaValues.first()
def slowMaValuePctChange = tool.pctChange(slowMaValues.take(60))

// zScore
def fastZScores = tool.zScores(prices.take(20))
def slowZScores = tool.zScores(prices.drop(1).take(20))
def fastZScore = fastZScores.first()
def slowZScore = slowZScores.first()
log.info("fastZScore:{}", fastZScore)
log.info("slowZScore:{}", slowZScore)

// analysis
def getSlowScoreAverage() {
    def analysis = getAnalysis(assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 60))
    def score = getScore(analysis)
    def scoreAverage = score.getAverage()
    return scoreAverage
}
def getFastScoreAverage() {
    def analysis = getAnalysis(assetIndicator.getOhlcvs(Ohlcv.Type.MINUTE, 3))
    def score = getScore(analysis)
    def scoreAverage = score.getAverage()
    return scoreAverage
}

def getLongScoreAverage() {
    def analysis = getAnalysis(assetIndicator.getOhlcvs(Ohlcv.Type.DAILY, 1))
    def score = getScore(analysis)
    def scoreAverage = score.getAverage()
    return scoreAverage
}

//def fastScoreAverage = getFastScoreAverage()
//def slowScoreAverage = getSlowScoreAverage()
//def longScoreAverage = getLongScoreAverage()

//if (fastScoreAverage > slowScoreAverage) {
    if (fastZScore > 1.5 && slowZScore > 2.0) {
        if (price > slowMaValue) {
            hold = 1
        }
    }
//}

//if (fastScoreAverage < slowScoreAverage) {
    if (fastZScore < -1.5 && slowZScore < -2.0) {
        if (price < slowMaValue) {
            hold = 0
        }
    }
//}

// fallback
//if ( [slowScoreAverage, longScoreAverage].average() > 70) {
//    hold = 1
//}
//if ( [longScoreAverage].average() < 50) {
//    hold = 0
//}

BalanceAsset balanceAsset = balance.getBalanceAsset(assetId).orElse(null)
if (balanceAsset != null) {
    if(balanceAsset.getProfitPercentage() > 0.5) {
        if (price < fastMaValue) {
            hold = 0.5
        }
    }
//    if(balanceAsset.getProfitPercentage() < -0.5) {
//        hold = 0
//    }
}

if (dateTime.toLocalTime().isAfter(LocalTime.of(15,10))) {
//    if ( [longScoreAverage].average() > 70) {
//        hold = 1
//    } else {
//        hold = 0
//    }
    hold = 0.5
}

// fallback
//if (slowMaValuePctChange < 0) {
//    hold = 0
//}

// return
return hold




